#!/usr/bin/env bash

### Restore database from a backup.
###
### Parameters:
###     <1> filename of an existing backup.
###
### Usage:
###     $ docker-compose -f <environment>.yml (exec |run --rm) postgres restore <1>

set -o errexit
set -o pipefail
set -o nounset

working_dir="$(dirname ${0})"
database_url="https://it-docs.sunshineprofits.com/current_db.sql.gz"
init_database_path="/init_db/current_db.sql.gz"
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

if [[ ! -f "${init_database_path}" ]]; then
    message_error "No backup with the specified filename found."
    wget --no-check-certificate --user="it" --password="SFxYB4g4XB" --output-document=${init_database_path} ${database_url}
fi

message_welcome "Initializing the '${POSTGRES_DB}' database from the init backup..."

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    message_error "Restoring as 'postgres' user is not supported. Assign 'POSTGRES_USER' env with another one and try again."
    exit 1
fi

export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"
message_info "'${POSTGRES_HOST}' '${POSTGRES_USER}'"
message_info "Dropping the database..."
dropdb "${PGDATABASE}"

message_info "Creating a new database..."
createdb --owner="${POSTGRES_USER}"

message_info "Applying the backup to the new database..."
gunzip -c "${init_database_path}" | psql "${POSTGRES_DB}"

message_success "The '${POSTGRES_DB}' database has been restored from the initial backup."
