version: "3.3"

volumes:
  local_postgres_data:
  local_postgres_data_backups:

services:
  nginx:
    image: nginx
    container_name: production_proxy
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    volumes:
      - ./staticfiles:/app/static
      - ./media:/app/media
#      - ./.scribe_queue:/app/scribe_queue
#      - /opt/proxy_data/certs/:/etc/local_certs:ro
      - /var/log/containers/:/var/log/nginx
    depends_on:
      - production_web
    networks:
      - backend
    ports:
      - "80:80"
      - "443:443"
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  production_db:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: postgres
#    container_name: content_db
#    volumes:
#      - local_postgres_data:/var/lib/postgresql/data:Z
#      - local_postgres_data_backups:/backups:z
#      - ./.current_db:/init_db
    env_file:
      - ./.envs/.production/.db
    networks:
      - backend
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    restart: always

  production_web:
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
#    command: gunicorn blog.wsgi:application --bind 0.0.0.0:8000
#    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
#    expose:
#      - "8000"
    volumes:
      - .:/app
#    expose:
#      - 3000
#    ports:
#      - "3000:3000"
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.db
    depends_on:
      - production_db
    command: /startweb
    networks:
      - backend

networks:
    backend:
